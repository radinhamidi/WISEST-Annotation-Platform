const handleUploadPdf = async (req, res, db, fs) => {
  const trx = await db.transaction(); // Start a transaction

  try {
    const file = req.files[0]; // Assuming only one file is uploaded at a time
    const pdfData = fs.readFileSync(file.path);
    const pdf_file_name = file.originalname;
    const pdf_title = '';
    const uploaded_by = req.body.uploaded_by; // Get the email from the request body
    let pdf_doi = req.body.pdf_doi; // Get the array of DOIs from the request body

    // Ensure pdf_doi is parsed as an array
    if (typeof pdf_doi === 'string') {
      pdf_doi = JSON.parse(pdf_doi);
    }

    // Check if any DOI already exists
    for (const doi of pdf_doi) {
      const existingDoi = await trx('pdf_DOIs').where({ pdf_doi: doi }).first();
      if (existingDoi) {
        await trx.rollback(); // Rollback the transaction
        return res.status(400).json({ error: `The DOI ${doi} already exists` });
      }
    }

    // Convert the pdf_doi array to a JSON string
    const pdf_doi_json = JSON.stringify(pdf_doi);

    // Insert pdf_file into pdf_files table within the transaction
    const pdf_files_result = await trx('pdf_files').insert({
      pdf_number: 20,
      pdf_file: pdfData,
      pdf_file_name: pdf_file_name,
      pdf_title: pdf_title,
      status: 'Available',
      uploaded_by: uploaded_by, // Store the email in the uploaded_by column
      pdf_doi: pdf_doi_json // Store the DOIs array as a JSON string
    });

    const pdf_id = pdf_files_result[0]; // since pdf_id is auto-generated by the database

    // Insert each DOI into the pdf_DOIs table within the transaction
    for (const doi of pdf_doi) {
      await trx('pdf_DOIs').insert({
        pdf_id: pdf_id,
        pdf_doi: doi
      });
    }

    // Commit the transaction if all queries succeed
    await trx.commit();

    // Delete the uploaded file after successful commit
    fs.unlinkSync(file.path);

    // Send both pdf_id and pdf_file_name in the response
    res.status(200).json({ pdf_id, pdf_file_name });
  } catch (error) {
    // Rollback the transaction if there's an error
    await trx.rollback();

    console.error('Error uploading file:', error);
    res.status(500).send('Internal server error.');
  }
};

export default { handleUploadPdf };
